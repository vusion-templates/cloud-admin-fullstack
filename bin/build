#!/usr/bin/env node

/**
 * Install npm packages
 */
const spawnSync = require('child_process').spawnSync;
const path = require('path');
const { getMicroPrefix } = require('./util/config');
const { printStart, printEnd, printInfo } = require('./util/log');

{
    printStart('npm install');
    const result = spawnSync('npm', ['install'], {
        stdio: 'inherit',
        cwd: path.join(__dirname, '..')
    });
    if (result.status)
        throw new Error(String(result.stderr));
    printEnd('npm install');
}

{
    printStart('npm run client:init');
    const result = spawnSync('npm', ['run', 'client:init'], {
        stdio: 'inherit',
        cwd: path.join(__dirname, '..')
    });
    if (result.status)
        throw new Error(String(result.stderr));
    printEnd('npm run client:init');
}

if (process.env.PARAM_APP_TYPE === 'MICROAPP') {
    process.env.MICRO_APP = true;
    process.env.PublicPath = `https://static-vusion.nos-eastchina1.126.net/micro/${getMicroPrefix()}`;

    {
        printStart('npm run client:build:micro');
        const result = spawnSync('npm', ['run','client:build:micro'], {
            stdio: 'inherit',
            cwd: path.join(__dirname, '..')
        });
        if (result.status)
            throw new Error(String(result.stderr));
        printEnd('npm run client:build:micro');
    }

} else {

    {
        printStart('npm run client:build');
        const result = spawnSync('npm', ['run','client:build'], {
            stdio: 'inherit',
            cwd: path.join(__dirname, '..')
        });
        if (result.status)
            throw new Error(String(result.stderr));
        printEnd('npm run client:build');
    }
    
    {
        printStart('npm run server:init');
        const result = spawnSync('npm', ['run', 'server:init'], {
            stdio: 'inherit',
            cwd: path.join(__dirname, '..')
        });
        if (result.status)
            throw new Error(String(result.stderr));
        printEnd('npm run server:init');
    }
    
}

